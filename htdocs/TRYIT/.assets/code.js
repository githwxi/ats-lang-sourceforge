// Generated by CoffeeScript 1.3.3
(function() {
  var console_clear, console_msg, display_compile_results, editor, make_editor, typecheck;

  editor = 0;

  $(document).ready(function() {
    var btn, output;
    output = $("#patsopt-output");
    btn = $("#typecheck-btn");
    return editor = make_editor("patsopt", output, btn);
  });

  make_editor = function(id, output, btn) {
    var buffer;
    editor = {
      id: id,
      output: output,
      marked_ranges: []
    };
    buffer = $("#" + id + " .code-mirror");
    if (buffer.length === 0) {
      return;
    }
    editor.code_mirror = CodeMirror.fromTextArea(buffer[0], {
      lineNumbers: true,
      matchBrackets: true
    });
    btn.bind("click", function() {
      return typecheck();
    });
    return editor;
  };

  console_msg = function(str) {
    return editor.output.html(str);
  };

  console_clear = function() {
    return ediotr.output.html("");
  };

  typecheck = function() {
    var code, params;
    code = editor.code_mirror.getValue();
    params = {
      input: code,
      _method: "PUT"
    };
    console_msg("Waiting for server...");
    return $.post(window.location.href, params, function(res) {
      return display_compile_results(editor, res);
    }, "json");
  };

  display_compile_results = function(ide, res) {
    var ce, cnt_lines, cs, element, focus_point, from, i, le, line, ls, marked, range, to, _i, _j, _k, _l, _len, _len1, _len2, _ref, _ref1, _ref2;
    cnt_lines = ide.code_mirror.lineCount();
    for (i = _i = 0; 0 <= cnt_lines ? _i <= cnt_lines : _i >= cnt_lines; i = 0 <= cnt_lines ? ++_i : --_i) {
      ide.code_mirror.setLineClass(i);
    }
    _ref = ide.marked_ranges;
    for (_j = 0, _len = _ref.length; _j < _len; _j++) {
      range = _ref[_j];
      range.clear();
    }
    ide.marked_ranges = [];
    console_msg("<pre>" + res.output + "</pre>");
    _ref1 = $(".point-error");
    for (_k = 0, _len1 = _ref1.length; _k < _len1; _k++) {
      element = _ref1[_k];
      line = $(element).attr("data-line") - 1;
      ide.code_mirror.setLineClass(line, "cm-error", "cm-error");
    }
    _ref2 = $(".range-error");
    for (_l = 0, _len2 = _ref2.length; _l < _len2; _l++) {
      element = _ref2[_l];
      ls = $(element).attr("data-line-start") - 1;
      cs = $(element).attr("data-char-start") - 1;
      le = $(element).attr("data-line-end") - 1;
      ce = $(element).attr("data-char-end") - 1;
      from = {
        line: ls,
        ch: cs
      };
      to = {
        line: le,
        ch: ce
      };
      marked = ide.code_mirror.markText(from, to, "cm-error");
      ide.marked_ranges.push(marked);
    }
    focus_point = function(point) {
      var coords;
      coords = ide.code_mirror.charCoords(point, "local");
      ide.code_mirror.scrollTo(coords.x, coords.y);
      ide.code_mirror.setCursor(point);
      return ide.code_mirror.focus();
    };
    $(".point-error").bind("click", function(e) {
      var char;
      line = $(this).attr("data-line") - 1;
      char = $(this).attr("data-char") - 1;
      return focus_point({
        line: line,
        ch: char
      });
    });
    return $(".range-error").bind("click", function(e) {
      var char;
      line = $(this).attr("data-line-start") - 1;
      char = $(this).attr("data-char-start") - 1;
      return focus_point({
        line: line,
        ch: char
      });
    });
  };

}).call(this);
