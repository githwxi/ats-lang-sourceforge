<HTML>
<BODY text="#000000" bgcolor="#ffffff" link="#0000FF" vlink="#CC00CC" alink="#ff0000">

<H2>Functions with Variable Arguments</H2>
<HR SIZE=1 ALIGN=LEFT><P>

As in C, a funciton in ATS may also take an indefinite number of arguments.
Let us use the function <i>printf</i> in ATS, which corresponds to the
<i>printf</i> in C, as an example to explain this feature.
<P>

The type of <i>printf</i> is given as follows:

<PRE><FONT COLOR="#E80000"><FONT COLOR="#000000">fun</FONT> printf <FONT COLOR="#000000">:</FONT> <FONT COLOR="#0000FF"><FONT COLOR="#000000">{</FONT>ts<FONT COLOR="#000000">:</FONT>types<FONT COLOR="#000000">}</FONT> <FONT COLOR="#000000">(</FONT>printf_c ts<FONT COLOR="#000000">,</FONT> ts<FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">-&gt;</FONT> void</FONT>
</FONT></PRE>

We use <i>printf_c</i> for a type constructor that forms types for format
strings (in C) when applied to lists of types. For instance,
<i>printf_c(char, double, int)</i> is a type for format strings that require
a character, a double, and an integer to be supplied. Given
a character <i>c</i>, a double <i>d</i> and an integer <i>i</i>,
<i>@(c, d, i)</i> is an argument of types <i>(char, double, int)</i>,
and the following expression is well-typed in ATS:

<PRE><FONT COLOR="#E80000">printf <FONT COLOR="#000000">(</FONT>"c = %c and d = %f and i = %i"<FONT COLOR="#000000">,</FONT> <FONT COLOR="#000000">@(</FONT>c<FONT COLOR="#000000">,</FONT> d<FONT COLOR="#000000">,</FONT> i<FONT COLOR="#000000">)</FONT><FONT COLOR="#000000">)</FONT>
</FONT></PRE>

The type of the format string
<i>"c = %c and d = %f and i = %i"</i> is computed to be
<i>printf_c(char, double, int)</i>
and then <i>@(c, d, i)</i> is checked to be of this type.
<P>

As an example, we present as follows a program that prints out a
multiplication table for single digits:

<PRE><FONT COLOR="#E80000"><FONT COLOR="#000000">implement</FONT> main <FONT COLOR="#000000">(</FONT>argc<FONT COLOR="#000000">,</FONT> argv<FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">=</FONT> <FONT COLOR="#000000">let</FONT>

<FONT COLOR="#787878">// [loop1] and [loop2] are verified to be terminating based on the supplied metrics
</FONT>
<FONT COLOR="#787878">// [.&lt; N-i, 0 &gt;.] is a termination metric
</FONT><FONT COLOR="#787878">// Please ignore it if you have not learned this feature yet
</FONT><FONT COLOR="#000000">fun</FONT> loop1 <FONT COLOR="#0000FF"><FONT COLOR="#000000">{</FONT>i<FONT COLOR="#000000">:</FONT> nat <FONT COLOR="#000000">|</FONT> i &lt;= N<FONT COLOR="#000000">}</FONT></FONT> <FONT COLOR="#0000FF"><FONT COLOR="#000000">.&lt;</FONT> N-i<FONT COLOR="#000000">,</FONT> 0 <FONT COLOR="#000000">&gt;.</FONT></FONT> <FONT COLOR="#000000">(</FONT>i<FONT COLOR="#000000">:</FONT> <FONT COLOR="#0000FF">int i</FONT><FONT COLOR="#000000">)</FONT><FONT COLOR="#000000">:</FONT> <FONT COLOR="#0000FF">void</FONT> <FONT COLOR="#000000">=</FONT>
  <FONT COLOR="#000000">if</FONT> i <FONT COLOR="#000000">&lt;</FONT> N <FONT COLOR="#000000">then</FONT> loop2 <FONT COLOR="#000000">(</FONT>i+1<FONT COLOR="#000000">,</FONT> i+1<FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">else</FONT> <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">)</FONT>

<FONT COLOR="#787878">// [.&lt; N-i, N+1-j &gt;.] is a termination metric
</FONT><FONT COLOR="#787878">// Please ignore it if you have notlearned this feature yet
</FONT><FONT COLOR="#000000">and</FONT> loop2 <FONT COLOR="#0000FF"><FONT COLOR="#000000">{</FONT>i<FONT COLOR="#000000">,</FONT>j<FONT COLOR="#000000">:</FONT>nat <FONT COLOR="#000000">|</FONT> i &lt;= N<FONT COLOR="#000000">;</FONT> j &lt;= N+1<FONT COLOR="#000000">}</FONT></FONT> <FONT COLOR="#0000FF"><FONT COLOR="#000000">.&lt;</FONT> N-i<FONT COLOR="#000000">,</FONT> N+2-j <FONT COLOR="#000000">&gt;.</FONT></FONT> <FONT COLOR="#000000">(</FONT>i<FONT COLOR="#000000">:</FONT> <FONT COLOR="#0000FF">int i</FONT><FONT COLOR="#000000">,</FONT> j<FONT COLOR="#000000">:</FONT> <FONT COLOR="#0000FF">int j</FONT><FONT COLOR="#000000">)</FONT><FONT COLOR="#000000">:</FONT> <FONT COLOR="#0000FF">void</FONT> <FONT COLOR="#000000">=</FONT>
  <FONT COLOR="#000000">if</FONT> j &lt;= N <FONT COLOR="#000000">then</FONT> <FONT COLOR="#000000">begin</FONT>
    <FONT COLOR="#000000">if</FONT> <FONT COLOR="#000000">(</FONT>i <FONT COLOR="#000000">&lt;</FONT> j<FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">then</FONT> print '\t'<FONT COLOR="#000000">;</FONT>
    printf <FONT COLOR="#000000">(</FONT>"%1d*%1d=%2.2d"<FONT COLOR="#000000">,</FONT> <FONT COLOR="#000000">@(</FONT>i<FONT COLOR="#000000">,</FONT> j<FONT COLOR="#000000">,</FONT> i * j<FONT COLOR="#000000">)</FONT><FONT COLOR="#000000">)</FONT><FONT COLOR="#000000">;</FONT>
    loop2 <FONT COLOR="#000000">(</FONT>i<FONT COLOR="#000000">,</FONT> j+1<FONT COLOR="#000000">)</FONT>
  <FONT COLOR="#000000">end</FONT> <FONT COLOR="#000000">else</FONT> <FONT COLOR="#000000">begin</FONT>
    print_newline <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">)</FONT><FONT COLOR="#000000">;</FONT> loop1 <FONT COLOR="#000000">(</FONT>i<FONT COLOR="#000000">)</FONT>
  <FONT COLOR="#000000">end</FONT>

<FONT COLOR="#000000">in</FONT>
  loop1 <FONT COLOR="#000000">(</FONT>0<FONT COLOR="#000000">)</FONT> 
<FONT COLOR="#000000">end</FONT> <FONT COLOR="#787878">// end of [main]
</FONT></FONT></PRE>

The following text is the output of the program:
<pre>
1*1=01	1*2=02	1*3=03	1*4=04	1*5=05	1*6=06	1*7=07	1*8=08	1*9=09
2*2=04	2*3=06	2*4=08	2*5=10	2*6=12	2*7=14	2*8=16	2*9=18
3*3=09	3*4=12	3*5=15	3*6=18	3*7=21	3*8=24	3*9=27
4*4=16	4*5=20	4*6=24	4*7=28	4*8=32	4*9=36
5*5=25	5*6=30	5*7=35	5*8=40	5*9=45
6*6=36	6*7=42	6*8=48	6*9=54
7*7=49	7*8=56	7*9=63
8*8=64	8*9=72
9*9=81
</pre>

<HR SIZE=1 ALIGN=LEFT><P>

The code used for illustration is available
<a href="functions-with-variable-arguments.dats">here</a>.

</BODY>
</HTML>
